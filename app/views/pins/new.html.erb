<div id='map'></div>
<style>
#map {
  height: 600px;
  width: 1000px;
}
</style>
<script>
// 初期マップの設定
var map;
var clickedLines;
var marker;
// 距離計算の関数
function haversine_distance(mk1, mk2) {
    var R = 6371071.0; // Radius of the Earth in meters
    var rlat1 = mk1.position.lat() * (Math.PI/180);
     // Convert degrees to radians
    var rlat2 = mk2.position.lat() * (Math.PI/180);
     // Convert degrees to radians
    var difflat = rlat2-rlat1; // Radian difference (latitudes)
    var difflon = (mk2.position.lng()-mk1.position.lng())
                * (Math.PI/180); // Radian difference (longitudes)

    var d = 2 * R
    * Math.asin(Math.sqrt(Math.sin(difflat/2)*Math.sin(difflat/2)
    +Math.cos(rlat1)*Math.cos(rlat2)
    *Math.sin(difflon/2)*Math.sin(difflon/2)));
    return d;
}
function initMap() {
  // 東京駅中心に表示
  const center = {lat: 35.68143661184076, lng:139.7671569811205};
  const options = {zoom: 15, scaleControl: true, center: center};
  map = new google.maps.Map(
    document.getElementById('map'), options);
  clickedLines = new google.maps.Polyline({
    geodesic: true,
    strokeColor: "#3333FF",
    strokeOpacity: 1.0,
    strokeWeight: 3
  });
  // マップにクリックイベントを設定
  google.maps.event.addListener(map, 'click', function(event) {
    // クリック時の位置を渡す
    drawOneLine(event.latLng);
  });
}

function drawOneLine(latLng) {
  var path = clickedLines.getPath();
  if ( path.length == 0 ) {
    createMarker(latLng);
    document.getElementById('txtLatLng').value = latLng.lat() + "," + latLng.lng();
    document.getElementById('pin_txtLatLng').value = latLng.lat() + "," + latLng.lng();
  } else {
    document.getElementById('txtLatLng').value = document.getElementById('txtLatLng').value + "\n" + latLng.lat() + "," + latLng.lng();
    document.getElementById('pin_txtLatLng').value = document.getElementById('txtLatLng').value + "\n" + latLng.lat() + "," + latLng.lng();

    path[path.length] // 一番新しい地点
    path[path.length - 1] // 一つ前の地点
    // var distance = haversine_distance(path[path.length], path[path.length - 1]);
    // document.getElementById('pin_distances').value = distance() + ":" + distance();
// 距離の出し方を検討中,ポリラインが消える問題あり
  }
  path.push(latLng);
    clickedLines.setMap(map);
}

function createMarker(latLng) {
  marker = new google.maps.Marker({
  position: latLng,
  map: map,
  title: '最初の位置'
  });
}
function deleteAllLines() {
  var path = clickedLines.getPath();
  if ( path != undefined ) {
    if ( path.length >= 0 ){
      do {
        if ( path.length == 0 ) break;
        path.pop();
      } while(1);
    }
  }
  document.getElementById('txtLatLng').value = "";
    if ( marker != undefined ) {
      marker.setMap(null);
    }
    if ( clickedLines != undefined ) {
      clickedLines.setMap(null);
    }
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API_KEY'] %>&callback=initMap" async defer></script>

<div>
  <%= form_with model: @pin do |f| %>
    <%= f.hidden_field :txtLatLng  %>
    <%= f.hidden_field :distances  %>
    <%= f.hidden_field :stroll_id, :value => @stroll_id %>
    <p>タイトル</p>
    <%= f.text_field :title, placeholder: "お散歩ルート識別の名前" %>
    <%= f.submit "散歩ルートを登録" %>
  <% end %>
</div>

<div id="map_canvas"></div>
<br />
<textarea style="height:10%;width:80%;margin-left:20px;margin-bottom:10px;" id="txtLatLng"></textarea>
<br />
<input type="button" value="線を消す"  onclick="deleteAllLines();" style="margin-left:20px;"/>



